{"version":3,"sources":["constants.js","actions/index.js","components/App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","reducers/index.js","store/configureStore.js","index.js"],"names":["ADD_REMINDER","DELETE_REMINDER","CLEAR_REMINDERS","SERVER_URL","addReminder","id","text","dueDate","timestamp","category","checked","eID","console","log","type","deleteReminder","fetchLastID","axios","get","then","data","response","code","body","clearReminders","capitalizeFirstLetter","first","rest","locale","navigator","language","toLocaleUpperCase","join","App","props","state","tags","this","fetchTasks","addTask","document","querySelectorAll","forEach","input","value","task","eventID","deleteTask","emptyDB","reminders","className","map","reminder","style","textDecorationLine","Badge","backgroundColor","color","moment","Date","subtract","fromNow","marginLeft","format","onClick","Math","floor","random","textTransform","placeholder","onChange","event","setState","target","Button","renderReminders","Component","connect","dispatch","post","error","record","taskYear","taskMonth","taskDay","taskHour","taskMinute","taskSecond","toISOString","taskContent","taskChecked","taskName","headers","date","tID","month","year","hour","minute","second","method","url","content","taskSubs","taskPriority","tid","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","action","removeById","filter","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.85d5bf85.chunk.js","sourcesContent":["export const ADD_REMINDER = 'ADD_REMINDER';\nexport const DELETE_REMINDER ='DELETE_REMINDER';\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS';\nexport const SERVER_URL = \"https://tasse-de-the-web-h5bxp.ondigitalocean.app/\";\n// export const SERVER_URL = \"https://localhost/\";","import {ADD_REMINDER, CLEAR_REMINDERS, DELETE_REMINDER, SERVER_URL} from '../constants';\nimport axios from 'axios'\nimport moment from \"moment\";\n\nexport const addReminder = (id, text, dueDate=0, timestamp, category, checked, eID) => {\n    console.log('action in addReminder: ', id, text, dueDate, timestamp, category, checked, eID);\n    return {\n        id,\n        type: ADD_REMINDER,\n        text,\n        dueDate,\n        timestamp,\n        category,\n        checked,\n        eID\n    };\n}\n\nexport const deleteReminder = (id) => {\n    return {\n        type: DELETE_REMINDER,\n        id\n    }\n}\n\nexport const deleteTask = (id, task, eventID) => {\n    const url = SERVER_URL + 'task/delete/' + id + '/' + eventID\n    return function(dispatch){\n        return axios({\n            method: 'delete',\n            url,\n            data: {\n                task\n            }\n        }).then(({data}) => {\n            if(data.response === 'success' && data.code === 200){\n                dispatch(deleteReminder(id))\n            }\n        })\n    }\n}\n\nexport const emptyDB = () => {\n    const url = SERVER_URL + 'tasks/delete'\n    return function(dispatch){\n        return axios.post(url).then(({data}) => {\n            if(data.code !== 200){\n                console.error('Error: ', data.response, ' ', data.body)\n            }\n            else{\n                console.log('axios response: ', data)\n                dispatch(clearReminders())\n            }\n        })\n    }\n}\n\nexport const fetchTasks = () => {\n    const url = SERVER_URL + 'tasks/all'\n    return function(dispatch){\n        return axios.get(url).then(({data}) => {\n            if(data){\n                for(const record of data){\n                    console.log('record: ', record)\n                    const dueDate =  new Date(record.taskYear,record.taskMonth,record.taskDay,record.taskHour,record.taskMinute,record.taskSecond).toISOString();\n                    const taskContent = record.task\n                    const timestamp = record.timestamp\n                    const category = record.category\n                    const checked = record.taskChecked;\n                    const eID = record.eID;\n                    dispatch(addReminder(record.id, taskContent,dueDate, timestamp, category, checked, eID))\n                }\n            }\n            else{\n                console.error('Error: ', data)\n            }\n        })\n    }\n}\n\nexport const fetchLastID = () => {\n    const url = SERVER_URL + 'tasks/id'\n    axios.get(url).then(({data}) => {\n        if(data.response === 'success' && data.code === 200 ){\n            return data.body;\n        }\n    })\n}\n\nexport const addTask = (taskName, timestamp, category) => {\n\n    console.log('fID:' ,fetchLastID())\n\n    const headers = {\n        'Content-Type': 'application/json'\n    }\n\n    const date = moment(new Date(timestamp))\n    const tID = fetchLastID() + 1;\n    console.log('tID: ', tID )\n    const taskDay = date.date()\n    const taskMonth = date.month() + 1\n    const taskYear = date.year()\n    const taskHour = date.hour()\n    const taskMinute = date.minute()\n    const taskSecond = date.second()\n    const url = SERVER_URL + 'task/add'\n    return function(dispatch){\n        return axios({\n            method: 'post',\n            url,\n            headers: headers,\n            data:[\n                {\n                    content: taskName,\n                    category,\n                    taskChecked: 0,\n                    taskYear,\n                    taskMonth,\n                    taskDay,\n                    taskSubs: {},\n                    taskPriority: 0,\n                    tid: Math.floor(Math.random()* (1000-50)),\n                    taskHour,\n                    taskMinute,\n                    taskSecond\n                }\n            ]\n\n        }).then(({data}) => {\n            console.log('addTask axios response: ', data)\n            if(data.code === 200 && data.response === 'success'){\n                console.log('task added successfully!')\n                console.log(data.body[0], data.body[1], data.body[2], data.body[3], data.body[4])\n                dispatch(addReminder(data.body[0], data.body[1], data.body[2], data.body[3], data.body[4], 0))\n            }\n        })\n    }\n}\n\n\n\nexport const clearReminders = () => {\n    console.log('clearReminders called')\n    return {\n        type: CLEAR_REMINDERS\n    };\n}","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport { Badge, Button} from 'react-bootstrap'\nimport { addReminder, deleteReminder, clearReminders, emptyDB, fetchTasks, addTask, deleteTask } from '../actions'\n\nconst capitalizeFirstLetter = ([ first, ...rest ], locale = navigator.language) =>\n    first.toLocaleUpperCase(locale) + rest.join('')\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.clearReminders()\n        this.props.fetchTasks()\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n            dueDate: '',\n            category: '',\n            tags: [],\n            checked: 0\n        }\n    }\n\n    addReminder() {\n        this.props.addTask(this.state.text, this.state.dueDate, this.state.category);\n        let inputFields = document.querySelectorAll('input');\n        inputFields.forEach(input => input.value = '');\n    }\n\n    deleteReminder(id, task, eventID) {\n        this.props.deleteTask(id, task, eventID);\n    }\n\n    emptyDB() {\n        this.props.emptyDB()\n    }\n\n    fetchTasks() {\n        this.props.fetchTasks()\n    }\n\n    renderReminders() {\n        const { reminders } = this.props;\n        return (\n            <ul className=\"list-group\">\n                {\n                    reminders.map(reminder => {\n                        return (\n                            <div key={Math.floor(Math.random() * 100)} className=\"reminder-tasks\">\n                                <li className=\"list-group-item reminder-items\"  key={reminder.id}>\n                                    <div className=\"list-item\">\n                                        {\n                                            reminder.checked ?\n                                                <div style={{textDecorationLine: 'line-through'}}>\n                                                    {reminder.text}\n                                                </div> : <div>{reminder.text}</div>\n                                        }\n                                        {/*<div><em></em></div>*/}\n                                        {/*<div><em>{moment(new Date((reminder.timestamp))).format(\"DD/MM/YYYY\")}</em></div>*/}\n                                        <div>\n                                            <Badge style={{backgroundColor: '#007bff', color: '#fff'}}>\n                                                {moment(new Date(reminder.dueDate)).subtract(1,'M').fromNow()}\n                                            </Badge>\n                                            <Badge color=\"info\" style={{backgroundColor: '#2ecc71', color: '#fff', marginLeft: '5px'}}>\n                                                {capitalizeFirstLetter(reminder.category)}\n                                            </Badge>\n                                            <Badge style={{backgroundColor: '#dc3545', color: '#fff', marginLeft: '5px'}}>\n                                                Created at: {moment(new Date((reminder.timestamp))).format(\"DD/MM/YYYY\")}\n                                            </Badge>\n                                        </div>\n                                    </div>\n                                    <div\n                                        className=\"list-item delete-button\"\n                                        onClick={() => this.deleteReminder(reminder.id, reminder.text, reminder.eID)}\n                                    >\n                                        &#x2715;\n                                    </div>\n                                </li>\n                            </div>\n                        )\n                    })\n                }\n            </ul>\n        )\n    }\n\n    render() {\n        return(\n            <div className=\"App\">\n                <div className=\"sandbox sandbox-correct-pronounciation\">\n                    <h1 className=\"heading heading-correct-pronounciation\">\n                        <var style={{textTransform: 'none'}}>Tasse de Thé</var>\n                    </h1>\n                </div>\n                <div className=\"form-inline reminder-form\">\n                    <div className=\"form-group\">\n                        <input\n                            className=\"form-control\"\n                            placeholder=\"I have to...\"\n                            onChange={event => this.setState({text: event.target.value})}\n                        />\n                        <input\n                            className=\"form-control\"\n                            placeholder=\"Category\"\n                            onChange={event => this.setState({category: event.target.value})}\n                        />\n                        <input\n                            className=\"form-control\"\n                            type=\"datetime-local\"\n                            onChange={event =>\n                                this.setState({\n                                    dueDate: event.target.value})}\n                        />\n                    </div>\n\n                    <Button\n                        type=\"button\"\n                        className=\"btn btn-success\"\n                        onClick={ () =>  this.addReminder()}\n                    >\n                        Add a new task\n                    </Button>\n\n                    <div\n                        className=\"btn btn-danger\"\n                        onClick={() => this.props.emptyDB()}\n                    >\n                        Clear all tasks\n                    </div>\n                    { this.renderReminders() }\n                </div>\n            </div>\n\n        )\n    }\n\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        reminders: state\n    }\n}\nexport default connect(mapStateToProps, { addReminder, deleteReminder, clearReminders, emptyDB, fetchTasks, addTask, deleteTask})(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ADD_REMINDER, CLEAR_REMINDERS, DELETE_REMINDER} from '../constants';\n\nconst reminder = (action) => {\n    let { id, text, dueDate, timestamp, category, checked, eID } = action;\n    return {\n        id,\n        text,\n        dueDate,\n        timestamp,\n        category,\n        checked,\n        eID\n    }\n}\n\nconst removeById  = (state = [], id) => {\n    return state.filter(reminder => reminder.id !== id);\n}\n\nconst reminders = (state = [], action) => {\n    let reminders = null;\n    switch(action.type) {\n        case ADD_REMINDER:\n            reminders = [...state, reminder(action)];\n            return reminders;\n        case DELETE_REMINDER:\n            reminders = removeById(state, action.id);\n            return reminders;\n        case CLEAR_REMINDERS:\n            reminders = [];\n            return reminders;\n        default:\n            return state;\n    }\n}\n\n\nexport default reminders;","import { createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nconst store = createStore(rootReducer, applyMiddleware(thunk))\nwindow.store = store\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\nimport { Provider } from 'react-redux';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/configureStore'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}