require("dotenv").config();
const express = require('express')
const app = express()
const bodyParser = require("body-parser");
const mysql = require('mysql')
const {google} = require('googleapis');
const port = process.env.port || 3000
const connection = require("./db.js");
const token = process.env.REFRESH_TOKEN;
const client_id = process.env.CLIENT_ID;
const client_secret = process.env.CLIENT_SECRET;
const redirect_uris = ["http://localhost:3000"];

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

const auth = new google.auth.OAuth2(
    client_id,
    client_secret,
    redirect_uris[0],
    access_type='offline'
);

const calendar = google.calendar({
    version: 'v3',
    project: 584661318077,
    auth: auth
});

let con;

handleDiscount = () => {
    con = mysql.createPool(connection);
    con.getConnection(error => {
        if(error) {
            console.log('Database connection error: ', error)
            setTimeout(handleDiscount, 2000)
            con.release();
        }
        else{
            console.log('Successfully connected to the database.')
        }
    })

    con.on('error', (err) => {
        console.log('db error: ', err)
        if(err.code === 'PROTOCOL_CONNECTION_LOST'){
            con.release();
            handleDiscount();
        }
        else{
            throw err;
        }
    })
    return con;
};

auth.setCredentials({ refresh_token: token });
google.options({ auth });

dateConstructor = (d,m,y,h,minute,s) => {
    const day = d;
    const month = m - 1;
    const year = y;
    const hour = h;
    const minutes = minute;
    const second = s;
    return new Date(year,month,day,hour,minutes,second).toISOString();
}

eventBuilder = (name, starty,startm,startd, starth, startminute, starts, endy,endm,endd, endh,endminute, ends, location="None", description="Generated by Tesse de the") => {
    const startDt = dateConstructor(startd, startm, starty, starth, startminute, starts);
    const endDt = dateConstructor(endd, endm, endy, endh, endminute, ends)

    return {
        'summary': name,
        'location': `${location}`,
        'description': `${description}`,
        'start': {
            'dateTime': `${startDt}`,
            'timeZone': 'Africa/Cairo'
        },
        'end': {
            'dateTime': `${endDt}`,
            'timeZone': 'Africa/Cairo'
        }
    };
}


addCalendarEvent = (event) => {
    return new Promise((resolve, reject) => {
        calendar.events.insert({
            calendarId: 'primary',
            resource: JSON.parse(JSON.stringify(event))
        }, (err, resp) => {
            if(err){
                reject(err);
            } else {
                if (resp.status === 200 && resp.statusText === 'OK') {
                    resolve(resp.data.id);
                }
            }
        })
    }).catch((err) => {
        console.log(`addCalendarEvent catched: ${err}`)
    })
}



try{
    let sql = handleDiscount();


    sqlExecute = (query) => {
        return new Promise((resolve, reject) =>
        {
            sql.query(query, (err, resp) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(true);
                    }
            })
        }).catch((err) => {
            console.log(`sql catched: ${err}`)
        })
    }




    app.post('/test', async(req, res) => {
        const reqBody = JSON.stringify(req.body);
        const request = JSON.parse(reqBody)
        let reqStatus = null;
        for (const task of request) {
            const taskContent = task.content;
            const taskID = task.tid;
            const taskPriority = task.taskPriority;
            const category = task.category;
            const taskDay = task.taskDay;
            const taskMonth = task.taskMonth;
            const taskYear = task.taskYear;
            const taskHour = task.taskHour;
            const taskMinute = task.taskMinute;
            const taskSecond = task.taskSecond;
            const timestamp = Date.now();
            const checked = task.taskChecked;
            const event = eventBuilder(taskContent, taskYear, taskMonth, taskDay, taskHour, taskMinute, taskSecond, taskYear, taskMonth, taskDay, taskHour, taskMinute, taskSecond);
            const eventID = await addCalendarEvent(event)
            const query = `INSERT INTO tasks(task, category, timestamp, taskDay, taskMonth, taskYear, taskHour, taskMinute, taskSecond, tID, priority,taskChecked, eID)  
            VALUES ('${taskContent}', '${category}', '${timestamp}', '${taskDay}', '${taskMonth}', '${taskYear}', '${taskHour}', '${taskMinute}', '${taskSecond}'
            , '${taskID}', '${taskPriority}', '${checked}', '${eventID}');`;
            const sqlRes = await sqlExecute(query);
            if(sqlRes){
                console.log('done!')
                reqStatus = true;
            }
            else{
                reqStatus = false;
            }
        }

        if(reqStatus){
            res.json({
                'response': 'success',
                'code': 200,
                'body': null
            });
        }
        else{
            res.json({
                'response': 'error',
                'code': 400,
                'body': null
            });
        }

    })

    app.get('/', (req,res) => {
        res.json({message: "Welcome!"})
    })

    app.listen(port, () => {
        console.log("Server is running on port " + port + ".");
    });
}
catch(e) {
    console.error('Catched: ', e)
}


